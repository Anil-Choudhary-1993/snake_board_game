{"version":3,"sources":["game/input.js","game/snake.js","game/food.js","game/utils.js","game/game.js","App.js","serviceWorker.js","index.js"],"names":["lastDirection","inputDirection","x","y","window","addEventListener","event","key","snakeBody","newSegment","update","GAME_BOARD","i","push","length","addSegment","position","getSnakeHead","onSnake","ignoreHead","some","elementPosition","index","equalPosition","pos1","pos2","food","EXPANSION_RATE","Math","floor","random","MAXIMUM_BOARD_SIZE","getRandomPosition","lastRenderTime","SNAKE_SPEED","gameOver","main","currentTime","alert","location","requestAnimationFrame","console","log","snakeHead","outsideBoardTouched","updateSnake","updateFood","innerHTML","snakeElement","forEach","element","document","createElement","style","gridRowStart","gridColumnStart","classList","add","appendChild","drawSnake","foodElement","drawFood","App","React","useEffect","querySelector","option","prompt","toLowerCase","startGame","id","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2cc8ccc6.chunk.js","sourcesContent":["let inputDirection = {x:0, y:0};\r\nlet lastDirection;\r\nwindow.addEventListener(\"keydown\", (event) => {\r\n    switch(event.key) {\r\n        case 'ArrowUp':\r\n            if(lastDirection.y !== 0) break;\r\n            inputDirection = {x: 0, y: -1}; \r\n            break;\r\n        case 'ArrowDown':\r\n            if(lastDirection.y !== 0) break;\r\n            inputDirection = {x: 0, y: 1};\r\n            break;\r\n        case 'ArrowLeft':\r\n            if(lastDirection.x !== 0) break;\r\n            inputDirection = {x: -1, y: 0};\r\n            break;\r\n        case 'ArrowRight':\r\n            if(lastDirection.x !== 0) break;\r\n            inputDirection = {x: 1, y: 0};\r\n            break;\r\n        default:\r\n            break;    \r\n    }\r\n});\r\n\r\nexport function getDirection() {\r\n    lastDirection = inputDirection;\r\n    return inputDirection;\r\n}","import { getDirection } from './input';\r\nimport { MAXIMUM_BOARD_SIZE } from './game';\r\n\r\nconst snakeBody = [{ x: 11, y: 11 }]\r\nlet newSegment = 0;\r\n\r\nexport function update(GAME_BOARD) {\r\n    addSegment();\r\n    const inputDirection = getDirection();\r\n    for (let position = snakeBody.length - 2; position >= 0; position--) {\r\n        snakeBody[position + 1] = { ...snakeBody[position] };\r\n    }\r\n    snakeBody[0].x += inputDirection.x;\r\n    snakeBody[0].y += inputDirection.y;\r\n}\r\n\r\nexport function draw(GAME_BOARD) {\r\n    let snakeElement;\r\n    snakeBody.forEach((element) => {\r\n        snakeElement = document.createElement(\"div\");\r\n        snakeElement.style.gridRowStart = element.y;\r\n        snakeElement.style.gridColumnStart = element.x;\r\n        snakeElement.classList.add(\"snake\");\r\n        GAME_BOARD.appendChild(snakeElement);\r\n    })\r\n}\r\n\r\nfunction getSnakeHead() {\r\n    return snakeBody[0];\r\n}\r\n\r\nexport function expandSnake(expansion_rate) {\r\n    newSegment += expansion_rate;\r\n}\r\n\r\nexport function onSnake(position, {ignoreHead = false}  = {}) {\r\n    return snakeBody.some((elementPosition, index) => {\r\n        if(ignoreHead && index === 0) return false;\r\n        return equalPosition(elementPosition, position);\r\n    });\r\n}\r\n\r\nfunction equalPosition(pos1, pos2) {\r\n    if (pos1.x === pos2.x && pos1.y === pos2.y) return true;\r\n    return false;\r\n}\r\n\r\nfunction addSegment() {\r\n    for (let i = 0; i < newSegment; i++) {\r\n        snakeBody.push({ ...snakeBody[snakeBody.length - 1] });\r\n    }\r\n    newSegment = 0;\r\n}\r\n\r\nexport function snakeBiteItself() {\r\n    return onSnake(getSnakeHead(), {ignoreHead: true})\r\n}\r\n\r\nexport function outsideBoardTouched() {\r\n    const snakeHead = getSnakeHead();\r\n    return (snakeHead.x < 1 || snakeHead.x > MAXIMUM_BOARD_SIZE || snakeHead.y < 1 || snakeHead.y > MAXIMUM_BOARD_SIZE);\r\n} ","import { onSnake, expandSnake } from './snake';\r\nimport { getRandomPosition } from './utils';\r\nimport { EXPANSION_RATE } from './game';\r\n\r\nlet food = {x: 18, y: 19};\r\n\r\nexport function update(GAME_BOARD) {\r\n    if(onSnake(food)) {\r\n        expandSnake(EXPANSION_RATE);\r\n        food = getRandomPosition();\r\n    }\r\n}\r\n\r\nexport function draw(GAME_BOARD) {\r\n    let foodElement = document.createElement(\"div\");\r\n    foodElement.style.gridRowStart = food.y;\r\n    foodElement.style.gridColumnStart = food.x;\r\n    foodElement.classList.add(\"food\");\r\n    GAME_BOARD.appendChild(foodElement);\r\n}","import { onSnake } from './snake';\r\nimport { MAXIMUM_BOARD_SIZE } from './game';\r\n\r\nexport function getRandomPosition() {\r\n    let position = null;\r\n    while(position === null || onSnake(position)) {\r\n        position = getFoodPosition();\r\n    }\r\n    return position;\r\n}\r\n\r\nfunction getFoodPosition() {\r\n    return {\r\n        x: Math.floor(Math.random() * MAXIMUM_BOARD_SIZE)+1,\r\n        y: Math.floor(Math.random() * MAXIMUM_BOARD_SIZE)+1\r\n    }\r\n}","import { update as updateSnake, draw as drawSnake, outsideBoardTouched, snakeBiteItself } from './snake';\r\nimport { update as updateFood, draw as drawFood} from './food';\r\n\r\nlet lastRenderTime = 0;\r\nlet SNAKE_SPEED = 4;\r\nlet GAME_BOARD = null;\r\nexport const MAXIMUM_BOARD_SIZE = 21;\r\nexport let EXPANSION_RATE = 1;\r\nlet gameOver = false;\r\n\r\nfunction main(currentTime) {\r\n    if(gameOver) {\r\n        alert(\"Game Over\");\r\n        window.location = \"/\";\r\n        return;\r\n    }\r\n    window.requestAnimationFrame(main);\r\n    const sinceLastRender = (currentTime - lastRenderTime) / 1000;\r\n    if(sinceLastRender < 1 / SNAKE_SPEED) return;\r\n    lastRenderTime = currentTime;\r\n    console.log(\"Rendering Board\")\r\n    update();\r\n    draw();\r\n}\r\n\r\nfunction draw() {\r\n    GAME_BOARD.innerHTML = '';\r\n    drawSnake(GAME_BOARD);\r\n    drawFood(GAME_BOARD);\r\n}\r\n\r\nfunction update() {\r\n    checkSnakeIsDead();\r\n    updateSnake(GAME_BOARD);\r\n    updateFood(GAME_BOARD);\r\n}\r\n\r\nfunction checkSnakeIsDead() {\r\n    if(snakeBiteItself() || outsideBoardTouched()) {\r\n        gameOver = true;\r\n        return;\r\n    }\r\n    gameOver = false;\r\n}\r\n\r\nexport function start() {\r\n    GAME_BOARD = document.querySelector(\"#game-board\");\r\n    const option = prompt(\"Please enter snake spped (Low, Medium, High)\");\r\n    if(option && option.toLowerCase() === 'medium') {\r\n        SNAKE_SPEED = 5;\r\n    } else if(option && option.toLowerCase() === 'high') {\r\n        SNAKE_SPEED = 8;\r\n    } else {\r\n        SNAKE_SPEED = 2;\r\n    } \r\n    EXPANSION_RATE = prompt(\"Please enter expansion rate for the snake\", 1);\r\n    window.requestAnimationFrame(main);\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { start as startGame } from './game/game';\r\n\r\nfunction App() {\r\n\r\n  React.useEffect(() => {\r\n    startGame();\r\n  }, [])\r\n  return (\r\n      <div id=\"game-board\"></div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}